{"version":3,"sources":["Components/GenerateSupportButton/MockData/CubeWired_30mm.stl","Components/Footer/FooterStyle.js","Components/Footer/Footer.js","Components/NavBar/NavBarStyle.js","Components/NavBar/NavBar.js","Components/ErrorAlert/ErrorAlert.js","Pages/FileConverter/FileConvertStyle.js","Pages/FileConverter/FileConverter.js","Pages/Home/HomeStyle.js","Pages/Home/Home.js","Utils/Context/CanvasContext.js","Components/ExportButton/ExportButton.js","Components/GenerateSupportButton/GeneratorSupportButtonStyle.js","Components/GenerateSupportButton/GenerateSupportButton.js","Components/OrientationButton/OrientationButton.js","Components/TransformControls/TransformControls.js","Components/UploadSTL/UploadSTLStyle.js","Components/UploadSTL/UploadSTL.js","Components/WireframeSwitch/WireframeSwitchStyle.js","Components/WireframeSwitch/WireframeSwitch.js","Components/STLCanvas/STLCanvasStyle.js","Components/STLCanvas/STLCanvas.js","Pages/SupportGenerator/SupportGenerator.js","App.js","serviceWorker.js","Assets/Style/theme.js","index.js"],"names":["module","exports","useStyles","makeStyles","require","theme","bottomNavigationStyle","position","left","bottom","width","backgroundColor","palette","primary","main","credit","padding","Footer","classes","className","Typography","BoxStyle","display","margin","breakpoints","down","navItems","button","spacing","link","textDecoration","NavBar","AppBar","Toolbar","Link","component","RouterLink","to","color","href","Button","variant","endIcon","ErrorAlert","message","Alert","severity","AlertTitle","uploadContainer","border","marginTop","marginBottom","Input","wrapper","fontSize","FileConverter","useState","fileName","setfileName","uploadSuccess","setUploadSuccess","errorMessage","setErrorMessage","Grid","container","item","xs","onSubmit","event","preventDefault","file","target","files","undefined","Error","name","split","pop","toUpperCase","STLloader","STLLoader","OBJloader","OBJLoader","reader","FileReader","readAsDataURL","onload","load","result","geometry","material","THREE","mesh","OBJExporter","parse","blob","Blob","type","exportFileName","shift","saveAs","exportOBJ","obj","STLExporter","binary","exportSTL","children","error","id","inputProps","accept","onChange","document","getElementById","value","Box","htmlFor","imageStyle","height","backgroundPosition","imageHolder","background","backgroundSize","description","paddingLeft","paddingRight","paddingTop","paddingBottom","title","subtitle","uploadBtn","float","Home","md","lg","align","CanvasContext","React","createContext","CanvasProvider","scene","useRef","camera","renderer","orbitControls","defaultCameraPosition","sceneNames","mainPlane","gridFloor","mainLight","stlModel","wireFrame","Provider","listOfMesh","ExportButton","useContext","onClick","exporter","meshIndex","length","exportFile","fullWidth","removeBtn","progressBar","GenerateSupportButton","showProgress","setShowProgress","generateSupport","a","mockLoading","Promise","resolve","setTimeout","then","post","response","loadSTL","rotation","x","Math","PI","computeBoundingBox","center","computeBoundingSphere","y","boundingBox","min","z","removeModel","push","current","add","remove","splice","url","mockSTL","LinearProgress","OrientationButton","resetView","set","anchorEl","setAnchorEl","handleClose","aria-controls","aria-haspopup","currentTarget","style","overflow","Menu","keepMounted","open","Boolean","onClose","MenuItem","sin","cos","TransformControls","enableManipulation","setEnableManipulation","listOfControls","useEffect","removeTransformControls","controlIndex","Switch","checked","transformControls","TransformManipulation","domElement","addEventListener","enabled","attach","IconButton","aria-label","PaperProps","maxHeight","setMode","handleTranslation","handleRotation","handleScale","originalPosition","originalRotation","originalScale","scale","handleApply","handleReset","ButtonGroup","size","setSize","max","UploadSTL","props","createGridFloor","division","getObjectByName","console","log","gridHelper","createPlane","plane","specular","loader","receiveShadow","castShadow","boundingSphere","radius","canvas","visibility","setModelLoaded","wireframe","WireframeSwitch","enableWireFrame","setEnableWireFrame","geo","mat","stlCanvas","stlCanvasWrapper","menuItem","gridContainer","STLCanvas","mount","handleSize","canvasLoaded","setCanvasLoaded","modelLoaded","clientWidth","clientHeight","handleResize","aspect","updateProjectionMatrix","updateLight","copy","render","antialias","OrbitControls","shadowMap","lookAt","appendChild","window","light","normalize","addLight","animate","requestAnimationFrame","update","enableZoom","removeEventListener","hideCanvas","ref","SupportGenerator","App","exact","path","location","hostname","match","createMuiTheme","ReactDOM","ThemeProvider","CssBaseline","Paper","minHeight","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5be7cb97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CubeWired_30mm.79b383eb.stl\";","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    bottomNavigationStyle: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        bottom: 0,\r\n        width: \"100%\",\r\n        backgroundColor: theme.palette.primary.main\r\n    },\r\n\r\n    credit: {\r\n        padding: \"15px\"\r\n    }\r\n}))\r\n\r\nexport default useStyles","import { Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport useStyles from './FooterStyle'\r\n\r\nconst Footer = () => {\r\n    const classes = useStyles()\r\n    return (\r\n        <div className={classes.bottomNavigationStyle}>\r\n            <Typography className={classes.credit}>\r\n                &copy; DAMLab | All rights reserved.\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    BoxStyle: {\r\n\r\n        padding: \"16px\",\r\n        display: \"inline-block\",\r\n        margin: \"auto\",\r\n\r\n        [theme.breakpoints.down('sm')]: {\r\n            margin: \"4px\",\r\n            padding: \"2px\"\r\n        }\r\n\r\n    },\r\n\r\n    navItems: {\r\n        width: \"100%\"\r\n    },\r\n    \r\n    button: {\r\n        margin: theme.spacing(1),\r\n        width: \"150px\"\r\n    },\r\n\r\n    link: {\r\n        '&:hover': {\r\n            textDecoration: \"none\"\r\n        }\r\n    }\r\n\r\n}))\r\n\r\nexport default useStyles","import { AppBar, Button, Link, Toolbar, Typography } from '@material-ui/core';\r\nimport { Home } from '@material-ui/icons';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport React from 'react';\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport useStyles from './NavBarStyle';\r\nconst NavBar = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div >\r\n            <AppBar position=\"static\">\r\n                <Toolbar >\r\n                    <Link component={RouterLink} to=\"/\" color=\"inherit\">\r\n                        <Home />\r\n                    </Link>\r\n\r\n                    <div className={classes.navItems}>\r\n                        <Typography className={classes.BoxStyle} >\r\n                            <Link component={RouterLink} to=\"/test\" color=\"inherit\">\r\n                                About\r\n                            </Link>\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.BoxStyle}>\r\n                            <Link href=\"https://github.com/nasaku898/Mesh-Support-Generator\" color=\"inherit\">\r\n                                GitHub\r\n                            </Link>\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.BoxStyle}>\r\n                            <Link component={RouterLink} to=\"/fileConverter\" color=\"inherit\">\r\n                                Convert File\r\n                            </Link>\r\n                        </Typography>\r\n                    </div>\r\n\r\n                    <Link className={classes.link} component={RouterLink} to=\"/supportGeneration\" color=\"inherit\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            className={classes.button}\r\n                            endIcon={<CloudUploadIcon />}\r\n                        >\r\n                            Upload\r\n                        </Button>\r\n                    </Link>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import { Alert, AlertTitle } from '@material-ui/lab';\r\nimport React from 'react';\r\nconst ErrorAlert = ({ message }) => {\r\n    return (\r\n        <div>\r\n            <Alert severity=\"error\">\r\n                <AlertTitle>Error</AlertTitle>\r\n                {message}\r\n            </Alert>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorAlert\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    uploadContainer: {\r\n        border: `solid 3px ${theme.palette.primary.main}`,\r\n        padding: \"25px\",\r\n        marginTop: \"25px\",\r\n        marginBottom: \"25px\",\r\n        '&:hover': {\r\n            color: theme.palette.primary.main\r\n        }\r\n    },\r\n\r\n    Input: {\r\n        display: \"none\"\r\n    },\r\n\r\n    wrapper: {\r\n        width: \"50%\",\r\n        margin: \"auto\",\r\n        [theme.breakpoints.down('xs')]: {\r\n            fontSize: \"1.5rem\",\r\n            width: \"80%\"\r\n        }\r\n    },\r\n\r\n    Typography: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            fontSize: \"1.5rem\",\r\n            color: \"red\",\r\n            width: \"100%\"\r\n        }\r\n    }\r\n}))\r\n\r\nexport default useStyles","import { Box, Button, Grid, Input, Typography } from '@material-ui/core'\r\nimport SyncAltIcon from '@material-ui/icons/SyncAlt'\r\nimport { saveAs } from 'file-saver'\r\nimport React, { useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter'\r\nimport { STLExporter } from 'three/examples/jsm/exporters/STLExporter'\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader'\r\nimport ErrorAlert from '../../Components/ErrorAlert/ErrorAlert'\r\nimport useStyles from './FileConvertStyle'\r\nconst FileConverter = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [fileName, setfileName] = useState(null)\r\n    const [uploadSuccess, setUploadSuccess] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    const exportOBJ = (mesh) => {\r\n        const exporter = new OBJExporter()\r\n        const file = exporter.parse(mesh)\r\n        let blob = new Blob([file], { type: 'text/plain' })\r\n        const exportFileName = fileName.split('.').shift()\r\n        saveAs(blob, `${exportFileName}.obj`)\r\n    }\r\n\r\n    const exportSTL = (mesh) => {\r\n        const exporter = new STLExporter()\r\n        const file = exporter.parse(mesh, { binary: true })\r\n        let blob = new Blob([file], { type: 'text/plain' })\r\n        const exportFileName = fileName.split('.').shift()\r\n        saveAs(blob, `${exportFileName}.stl`)\r\n    }\r\n\r\n    const getFileName = () => {\r\n        setfileName(document.getElementById('file').value.split(/(\\\\|\\/)/g).pop())\r\n    }\r\n\r\n    const convertSTLtoOBJ = (event) => {\r\n        event.preventDefault()\r\n        try {\r\n            const file = event.target.file.files[0]\r\n            if (file === undefined) {\r\n                throw new Error(\"No file found\")\r\n            }\r\n\r\n            if (file.name.split('.').pop().toUpperCase() !== \"STL\" && file.name.split('.').pop().toUpperCase() !== \"OBJ\") {\r\n                throw new Error(\"File type is not supported\")\r\n            }\r\n\r\n            const STLloader = new STLLoader()\r\n            const OBJloader = new OBJLoader()\r\n            \r\n            const reader = new FileReader()\r\n            \r\n            let mesh = undefined\r\n            \r\n            reader.readAsDataURL(file)\r\n            reader.onload = (event) => {\r\n                if (file.name.split('.').pop().toUpperCase() === \"STL\") {\r\n                    STLloader.load(event.target.result, geometry => {\r\n                        const material = new THREE.MeshPhongMaterial({ color: 0xff00ff })\r\n                        mesh = new THREE.Mesh(geometry, material)\r\n                        exportOBJ(mesh)\r\n                    })\r\n                } else {\r\n                    OBJloader.load(event.target.result, obj => {\r\n                        mesh = obj.children.pop()\r\n                        exportSTL(mesh)\r\n                    })\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.message)\r\n            setUploadSuccess(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n\r\n            <Grid container spacing={0}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h2\">Convert STL <SyncAltIcon fontSize='large' /> OBJ</Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <form onSubmit={convertSTLtoOBJ}>\r\n                        <Input className={classes.Input} type=\"file\" id=\"file\" inputProps={{ accept: \".stl,.obj\" }} onChange={getFileName} />\r\n                        <Box className={classes.uploadContainer}>\r\n                            <label htmlFor=\"file\" >\r\n\r\n                                <Typography variant=\"h5\" >\r\n                                    {\r\n                                        fileName ? fileName : \"Select files for conversion\"\r\n                                    }\r\n                                </Typography>\r\n                            </label>\r\n\r\n                        </Box>\r\n\r\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                            Convert\r\n                        </Button>\r\n\r\n                        {\r\n                            (!uploadSuccess) &&\r\n                            <ErrorAlert message={errorMessage}></ErrorAlert>\r\n                        }\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FileConverter\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    imageStyle: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        backgroundPosition: \" center center\"\r\n    },\r\n\r\n    imageHolder: {\r\n        background: \"url(https://cdn.discordapp.com/attachments/484102130286854144/730130581437939801/3d-printer.jpg) no-repeat\",\r\n        backgroundPosition: \"center center\",\r\n        backgroundSize: \"cover\",\r\n        height: \"768px\"\r\n    },\r\n\r\n    description: {\r\n        height: \"768px\",\r\n        paddingLeft: \"20%\",\r\n        paddingRight: \"20%\",\r\n        paddingTop: \"20%\",\r\n        paddingBottom: \"20%\"\r\n    },\r\n\r\n    title: {\r\n        margin: \"50px 0px 50px 0px\",\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: \"2.5rem\"\r\n        }\r\n    },\r\n\r\n    subtitle: {\r\n        margin: \"20px 0px 20px 0px\",\r\n    },\r\n\r\n    uploadBtn: {\r\n        float: \"left\"\r\n    }\r\n}))\r\n\r\nexport default useStyles","import { Box, Button, Grid, Link, Typography } from '@material-ui/core';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport React from 'react';\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport useStyles from './HomeStyle';\r\nconst Home = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={0}>\r\n                \r\n                <Grid item xs={12} md={6} lg={6}>\r\n                    <Box className={classes.imageHolder}>\r\n                    </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={6} lg={6}>\r\n                    <Box className={classes.description}>\r\n                        <Typography className={classes.title} variant=\"h3\" align=\"left\">\r\n                            3D STL Model\r\n                            <br />\r\n                            Grid Support\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.subtitle} variant=\"h6\" align=\"left\">\r\n                            Generate a grid support structure for your STL model\r\n                        </Typography>\r\n\r\n                        <Link className={classes.link} component={RouterLink} to=\"/supportGeneration\" color=\"inherit\">\r\n                            <br />\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.uploadBtn}\r\n                                endIcon={<CloudUploadIcon />}\r\n                            >\r\n                                <Typography>\r\n                                    Upload File\r\n                            </Typography>\r\n                            </Button>\r\n                        </Link>\r\n                        \r\n                    </Box>\r\n               \r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useRef } from 'react'\r\nimport * as THREE from 'three'\r\n\r\nexport const CanvasContext = React.createContext()\r\n\r\nconst CanvasProvider = ({ children }) => {\r\n    const scene = useRef(null)\r\n    const camera = useRef(null)\r\n    const renderer = useRef(null)\r\n    const orbitControls = useRef(null)\r\n    const defaultCameraPosition = useRef(new THREE.Vector3(0, 0, 100))\r\n    \r\n    const sceneNames = useRef({\r\n        mainPlane: \"mainPlane\",\r\n        gridFloor: \"gridFloor\",\r\n        mainLight: \"mainLight\",\r\n        stlModel: \"stlModel\",\r\n        wireFrame: \"wireFrame\"\r\n    })\r\n\r\n    const listOfMesh = []\r\n\r\n    return (\r\n        <CanvasContext.Provider value={{\r\n            scene: scene,\r\n            camera: camera,\r\n            renderer: renderer,\r\n            defaultCameraPosition: defaultCameraPosition,\r\n            sceneNames: sceneNames,\r\n            orbitControls: orbitControls,\r\n            listOfMesh:listOfMesh\r\n        }}>\r\n            {children}\r\n        </CanvasContext.Provider>\r\n    )\r\n}\r\nexport default CanvasProvider","import { Button } from '@material-ui/core'\r\nimport { saveAs } from 'file-saver'\r\nimport React, { useContext } from 'react'\r\nimport { STLExporter } from 'three/examples/jsm/exporters/STLExporter'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nconst ExportButton = () => {\r\n\r\n    const { listOfMesh } = useContext(CanvasContext)\r\n\r\n    const exportSTL = () => {\r\n        const exporter = new STLExporter()\r\n        for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n            const mesh = listOfMesh[meshIndex]\r\n            const exportFile = exporter.parse(mesh)\r\n            let blob = new Blob([exportFile], { type: 'text/plain' })\r\n            saveAs(blob, `${mesh.name}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={exportSTL} fullWidth>Export</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExportButton","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    removeBtn: {\r\n        width: \"100%\"\r\n    },\r\n\r\n    progressBar: {\r\n        marginTop: \"10px\"\r\n    },\r\n}))\r\n\r\nexport default useStyles","import { Button, LinearProgress } from '@material-ui/core'\r\nimport React, { useContext, useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nimport useStyles from './GeneratorSupportButtonStyle'\r\nimport mockSTL from './MockData/CubeWired_30mm.stl'\r\nconst GenerateSupportButton = () => {\r\n\r\n    let { scene, listOfMesh } = useContext(CanvasContext)\r\n\r\n    const classes = useStyles()\r\n    const [showProgress, setShowProgress] = useState(false)\r\n\r\n    /*To do: connect this button to backend and update view*/\r\n    const generateSupport = async () => {\r\n\r\n        const mockLoading = () => {\r\n            return new Promise(resolve=>{\r\n                setTimeout(()=>{\r\n                    resolve()\r\n                },3000)\r\n            })  \r\n        }\r\n        setShowProgress(true)\r\n\r\n        await mockLoading().then(()=>{\r\n             setShowProgress(false)\r\n        })\r\n        \r\n        post(\"backedURL\").then((response) => {\r\n            loadSTL(response.file)\r\n        })\r\n\r\n    }\r\n    const loadSTL = (file) => {\r\n        const loader = new STLLoader()\r\n        loader.load(file, (geometry) => {\r\n\r\n            const material = new THREE.MeshPhongMaterial({ color: 0xff00ff })\r\n            const mesh = new THREE.Mesh(geometry, material)\r\n            mesh.rotation.x = - Math.PI / 2\r\n            \r\n            mesh.geometry.computeBoundingBox()\r\n            mesh.geometry.center()\r\n            mesh.geometry.computeBoundingSphere()\r\n\r\n            mesh.position.y += -mesh.geometry.boundingBox.min.z\r\n            mesh.name = \"support.stl\"\r\n            removeModel()\r\n            listOfMesh.push(mesh)\r\n\r\n            scene.current.add(mesh)\r\n        })\r\n    }\r\n\r\n    const removeModel = () => {\r\n        for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n            scene.current.remove(listOfMesh[meshIndex])\r\n        }\r\n        listOfMesh.splice(0, listOfMesh.length)\r\n    }\r\n\r\n    //This is a mock, use api request such as axios to connect to backend\r\n    const post = url => {\r\n        return Promise.resolve(\r\n            {\r\n                file: mockSTL\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={generateSupport}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.removeBtn} >\r\n                Generate Support\r\n            </Button>\r\n            {\r\n                (showProgress) &&\r\n                <LinearProgress color=\"secondary\" className={classes.progressBar}></LinearProgress>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GenerateSupportButton","import { Button, Menu, MenuItem, Typography } from '@material-ui/core'\r\nimport React, { useContext } from 'react'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nconst OrientationButton = () => {\r\n\r\n    const { camera, defaultCameraPosition } = useContext(CanvasContext)\r\n\r\n    const resetView = () => {\r\n        camera.current.position.set(defaultCameraPosition.current.x, defaultCameraPosition.current.y, defaultCameraPosition.current.z)\r\n    }\r\n\r\n    const leftSideView = () => {\r\n        resetView()\r\n        camera.current.position.x = Math.sin(-Math.PI / 2) * defaultCameraPosition.current.z\r\n        camera.current.position.z = Math.cos(-Math.PI / 2) * defaultCameraPosition.current.z\r\n    }\r\n\r\n    const rightSideView = () => {\r\n        resetView()\r\n        camera.current.position.x = Math.sin(Math.PI / 2) * defaultCameraPosition.current.z\r\n        camera.current.position.z = Math.cos(Math.PI / 2) * defaultCameraPosition.current.z\r\n    }\r\n    const topView = () => {\r\n        resetView()\r\n        camera.current.position.y = defaultCameraPosition.current.z\r\n        camera.current.position.z = 0\r\n    }\r\n\r\n    const frontView = () => {\r\n        resetView()\r\n    }\r\n\r\n    const threeDView = () => {\r\n        resetView()\r\n\r\n        camera.current.position.x = Math.sin(-Math.PI / 4) * defaultCameraPosition.current.z\r\n        camera.current.position.z = Math.cos(-Math.PI / 4) * defaultCameraPosition.current.z\r\n        camera.current.position.y = defaultCameraPosition.current.z\r\n    }\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    return (\r\n        <>\r\n            <Button aria-controls=\"orientation-menu\" aria-haspopup=\"true\" onClick={handleClick} fullWidth>\r\n                <Typography style={{ overflow: \"hidden\" }}>Select Orientation</Typography>\r\n            </Button>\r\n            <Menu\r\n                id=\"orientation-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={() => { leftSideView(); handleClose(); }}>Left</MenuItem>\r\n                <MenuItem onClick={() => { rightSideView(); handleClose(); }}>Right</MenuItem>\r\n                <MenuItem onClick={() => { topView(); handleClose(); }}>Top</MenuItem>\r\n                <MenuItem onClick={() => { frontView(); handleClose(); }}>Front</MenuItem>\r\n                <MenuItem onClick={() => { threeDView(); handleClose(); }}>3D</MenuItem>\r\n            </Menu>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrientationButton\r\n","import { Button, ButtonGroup, IconButton, Menu, MenuItem, Switch, Typography } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { TransformControls as TransformManipulation } from 'three/examples/jsm/controls/TransformControls'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\n\r\nconst TransformControls = () => {\r\n    const [enableManipulation, setEnableManipulation] = useState(false)\r\n    const { scene, camera, renderer, orbitControls, listOfMesh } = useContext(CanvasContext)\r\n\r\n    const listOfControls = useRef([])\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const toggleManipulation = () => {\r\n        if (!enableManipulation) {\r\n\r\n            for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n                let mesh = listOfMesh[meshIndex]\r\n                const transformControls = new TransformManipulation(camera.current, renderer.current.domElement)\r\n                transformControls.addEventListener('dragging-changed', (event) => { orbitControls.current.enabled = !event.value })\r\n                transformControls.attach(mesh)\r\n\r\n                scene.current.add(transformControls)\r\n                listOfControls.current.push(transformControls)\r\n            }\r\n            setEnableManipulation(true)\r\n        } else {\r\n            removeTransformControls()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            removeTransformControls()\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const removeTransformControls = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            scene.current.remove(listOfControls.current[controlIndex])\r\n        }\r\n        setEnableManipulation(false)\r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleTranslation = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            listOfControls.current[controlIndex].setMode(\"translate\")\r\n        }\r\n    }\r\n\r\n    const handleRotation = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            listOfControls.current[controlIndex].setMode(\"rotate\")\r\n        }\r\n    }\r\n\r\n    const handleScale = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            listOfControls.current[controlIndex].setMode(\"scale\")\r\n        }\r\n    }\r\n\r\n    const handleIncrease = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            const transformControls = listOfControls.current[controlIndex]\r\n            transformControls.setSize(transformControls.size + 0.1)\r\n        }\r\n    }\r\n\r\n    const handleDecrease = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            const transformControls = listOfControls.current[controlIndex]\r\n            transformControls.setSize(Math.max(transformControls.size - 0.1, 0.1))\r\n        }\r\n    }\r\n\r\n    const handleReset = () => {\r\n        for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n            const mesh = listOfMesh[meshIndex]\r\n            mesh.position.set(mesh.originalPosition.x, mesh.originalPosition.y, mesh.originalPosition.z)\r\n            mesh.rotation.set(mesh.originalRotation.x, mesh.originalRotation.y, mesh.originalRotation.z)\r\n            mesh.scale.set(mesh.originalScale.x, mesh.originalScale.y, mesh.originalScale.z)\r\n        }\r\n    }\r\n\r\n    const handleApply = () => {\r\n        for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n            const mesh = listOfMesh[meshIndex]\r\n            mesh.originalPosition = { x: mesh.position.x, y: mesh.position.y, z: mesh.position.z }\r\n            mesh.originalRotation = { x: mesh.rotation.x, y: mesh.rotation.y, z: mesh.rotation.z }\r\n            mesh.originalScale = { x: mesh.scale.x, y: mesh.scale.y, z: mesh.scale.z }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography style={{ overflow: \"hidden\" }}> Manipulation</Typography>\r\n            <Switch\r\n                checked={enableManipulation}\r\n                onChange={toggleManipulation}\r\n                name=\"checkedA\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n            />\r\n\r\n            {\r\n                (enableManipulation) &&\r\n                <IconButton\r\n                    aria-label=\"more\"\r\n                    aria-controls=\"long-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleClick}\r\n                >\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n            }\r\n\r\n            <Menu\r\n                id=\"long-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={open}\r\n                onClose={handleClose}\r\n                PaperProps={{\r\n                    style: {\r\n                        maxHeight: 48 * 4.5,\r\n                        width: '20ch',\r\n                    },\r\n                }}\r\n            >\r\n\r\n                <MenuItem onClick={() => { handleTranslation(); handleClose(); }}>\r\n                    Translate\r\n                </MenuItem>\r\n                <MenuItem onClick={() => { handleRotation(); handleClose(); }}>\r\n                    Rotation\r\n                </MenuItem>\r\n                <MenuItem onClick={() => { handleScale(); handleClose(); }}>\r\n                    Scale\r\n                </MenuItem>\r\n                <MenuItem onClick={() => { handleApply(); handleClose(); }}>\r\n                    Apply\r\n                </MenuItem>\r\n                <MenuItem onClick={() => { handleReset(); handleClose(); }}>\r\n                    Reset\r\n                </MenuItem>\r\n                <MenuItem>\r\n                    <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\r\n                        <Button onClick={handleIncrease}><AddIcon /></Button>\r\n                        <Button onClick={handleDecrease}><RemoveIcon /></Button>\r\n                    </ButtonGroup>\r\n                </MenuItem>\r\n            </Menu>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TransformControls\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    Input: {\r\n        display: \"none\"\r\n    },\r\n    uploadContainer: {\r\n        border: `solid 3px ${theme.palette.primary.main}`,\r\n        padding: \"25px\",\r\n        marginTop: \"25px\",\r\n        '&:hover': {\r\n            color: theme.palette.primary.main\r\n        }\r\n    },\r\n    errorMessage: {\r\n        margin: \"20px\"\r\n    },\r\n}))\r\n\r\nexport default useStyles","import { Box, Button, Input, Typography } from '@material-ui/core';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport React, { useContext, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext';\r\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\r\nimport useStyles from './UploadSTLStyle';\r\n\r\n\r\nconst UploadSTL = (props) => {\r\n    let { scene, camera, defaultCameraPosition, listOfMesh, sceneNames } = useContext(CanvasContext)\r\n\r\n    const [uploadSuccess, setUploadSuccess] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    const [fileName, setfileName] = useState(null)\r\n\r\n    const classes = useStyles()\r\n\r\n    const getFileName = () => {\r\n        setfileName(document.getElementById('file').value.split(/(\\\\|\\/)/g).pop())\r\n    }\r\n\r\n    const loadSTL = (event) => {\r\n        event.preventDefault()\r\n        try {\r\n            const file = event.target.file.files[0]\r\n\r\n            if (file === undefined) {\r\n                throw new Error(\"No file found\")\r\n            }\r\n\r\n            if (file.name.split('.').pop().toUpperCase() !== \"STL\") {\r\n                throw new Error(\"File type is not supported\")\r\n            }\r\n\r\n            const loader = new STLLoader()\r\n            const reader = new FileReader()\r\n            reader.readAsDataURL(file)\r\n            reader.onload = (event) => {\r\n                loader.load(event.target.result, geometry => {\r\n                    const material = new THREE.MeshPhongMaterial({ color: 0xff00ff })\r\n                    const mesh = new THREE.Mesh(geometry, material)\r\n                    // Rotate to flat plane\r\n                    mesh.rotation.x = - Math.PI / 2\r\n                    mesh.receiveShadow = true\r\n                    mesh.castShadow = true\r\n                    mesh.geometry.computeBoundingBox()\r\n                    mesh.geometry.center()\r\n                    mesh.geometry.computeBoundingSphere()\r\n                    \r\n                    //center mesh\r\n                    camera.current.position.z = mesh.geometry.boundingSphere.radius * 2\r\n                    defaultCameraPosition.current.set(defaultCameraPosition.current.x, defaultCameraPosition.current.y, camera.current.position.z)\r\n                    mesh.position.y += -mesh.geometry.boundingBox.min.z\r\n                    mesh.name = file.name\r\n\r\n                    mesh.originalPosition = { x: mesh.position.x, y: mesh.position.y, z: mesh.position.z }\r\n                    mesh.originalRotation = { x: mesh.rotation.x, y: mesh.rotation.y, z: mesh.rotation.z }\r\n                    mesh.originalScale = { x: mesh.scale.x, y: mesh.scale.y, z: mesh.scale.z }\r\n\r\n                    listOfMesh.push(mesh)\r\n                    scene.current.add(mesh)\r\n                    console.log(mesh)\r\n                    camera.current.position.x = Math.sin(-Math.PI / 4) * defaultCameraPosition.current.z\r\n                    camera.current.position.z = Math.cos(-Math.PI / 4) * defaultCameraPosition.current.z\r\n                    camera.current.position.y = defaultCameraPosition.current.z\r\n                    const canvas = document.getElementById('stlCanvas')\r\n\r\n                    createPlane(mesh.geometry.boundingBox.max.x*3,mesh.geometry.boundingBox.max.y*3)\r\n                    createGridFloor(mesh.geometry.boundingBox.max.x*3,mesh.geometry.boundingBox.max.y*3)\r\n                    \r\n                    canvas.style.visibility = 'visible'\r\n                    props.setModelLoaded(true)\r\n                    setUploadSuccess(true)\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.message)\r\n            setUploadSuccess(false)\r\n        }\r\n    }\r\n\r\n    const createGridFloor = (size, division) => {\r\n        const gridFloor =scene.current.getObjectByName(sceneNames.current.gridFloor)\r\n        console.log(gridFloor)\r\n        if(gridFloor !== undefined){\r\n            gridFloor.geometry.computeBoundingBox()\r\n            if(gridFloor.geometry.boundingBox.max.x*3 > size){\r\n                return\r\n            }else{\r\n                scene.current.remove(gridFloor)\r\n            }\r\n        }\r\n\r\n        const gridHelper = new THREE.GridHelper(size, division)\r\n        gridHelper.name = sceneNames.current.gridFloor\r\n        scene.current.add(gridHelper)\r\n    }\r\n\r\n    const createPlane = (width,height) => {\r\n        var plane = new THREE.Mesh(\r\n            new THREE.PlaneBufferGeometry(width, height),\r\n            new THREE.MeshPhongMaterial({ color: 0x999999, specular: 0x101010 })\r\n        )\r\n        plane.name = sceneNames.current.mainPlane\r\n        plane.rotation.x = - Math.PI / 2\r\n        plane.position.y = - 0.5\r\n        scene.current.add(plane)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <form onSubmit={loadSTL}>\r\n                    <Input className={classes.Input} type=\"file\" id=\"file\" name=\"file\" inputProps={{ accept: \".stl\" }} onChange={getFileName} >\r\n                    </Input>\r\n\r\n                    <Box className={classes.uploadContainer}>\r\n                        <label htmlFor=\"file\">\r\n\r\n                            <Typography variant=\"h5\" >\r\n                                {\r\n                                    (fileName ? fileName : \"+ Select a STL file\")\r\n                                }\r\n                            </Typography>\r\n\r\n                        </label>\r\n                    </Box>\r\n\r\n                    <br />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.uploadBtn}\r\n                        endIcon={<CloudUploadIcon />}\r\n                        type=\"submit\"\r\n                    >\r\n                        <Typography>\r\n                            Load File\r\n                        </Typography>\r\n                    </Button>\r\n                </form>\r\n            }\r\n            {\r\n                (!uploadSuccess) &&\r\n                <div className={classes.errorMessage}>\r\n                    <ErrorAlert message={errorMessage}></ErrorAlert>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UploadSTL\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    wireframe: {\r\n        overflow: \"hidden\"\r\n    }\r\n}))\r\n\r\nexport default useStyles","import { Switch, Typography } from '@material-ui/core'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nimport useStyles from './WireframeSwitchStyle'\r\n\r\nconst WireframeSwitch = () => {\r\n    const [enableWireFrame, setEnableWireFrame] = useState(false)\r\n    const classes = useStyles()\r\n\r\n    const { scene, sceneNames, listOfMesh } = useContext(CanvasContext)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // eslint-disable-next-line \r\n            const wireframe = scene.current.getObjectByName(sceneNames.current.wireFrame)\r\n            // eslint-disable-next-line\r\n            scene.current.remove(wireframe)\r\n        }\r\n    }, [scene, sceneNames])\r\n\r\n    const toggleWireFrame = () => {\r\n        if (!enableWireFrame) {\r\n            const enableWireFrame = () => {\r\n                for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n                    const mesh = listOfMesh[meshIndex]\r\n                    const geo = new THREE.WireframeGeometry(mesh.geometry)\r\n                    const mat = new THREE.MeshPhongMaterial({ color: 0xff00ff })\r\n\r\n                    const wireframe = new THREE.LineSegments(geo, mat)\r\n                    wireframe.name = \"wireframe\"\r\n                    mesh.add(wireframe)\r\n                    wireframe.rotation.x = 2 * Math.PI\r\n                }\r\n                setEnableWireFrame(true)\r\n            }\r\n            enableWireFrame()\r\n        } else {\r\n\r\n            for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n                const mesh = listOfMesh[meshIndex]\r\n                const wireframe = mesh.getObjectByName(\"wireframe\")\r\n                mesh.remove(wireframe)\r\n            }\r\n\r\n            setEnableWireFrame(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography className={classes.wireframe}>Wireframe</Typography>\r\n            <Switch\r\n                checked={enableWireFrame}\r\n                onChange={toggleWireFrame}\r\n                name=\"checkedA\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WireframeSwitch\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    stlCanvas: {\r\n        width: \"100%\",\r\n        height: \"500px\",\r\n        visibility: \"hidden\",\r\n        border: `solid 3px ${theme.palette.primary.main}`,\r\n        margin: \"auto\",\r\n        marginTop: \"50px\"\r\n    },\r\n\r\n    stlCanvasWrapper: {\r\n        width: \"50%\",\r\n        height: \"100%\",\r\n        margin: \"auto\",\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: \"90%\"\r\n        }\r\n\r\n    },\r\n\r\n    Input: {\r\n        display: \"none\"\r\n    },\r\n\r\n    uploadContainer: {\r\n        border: `solid 3px ${theme.palette.primary.main}`,\r\n        padding: \"25px\",\r\n        marginTop: \"25px\",\r\n        '&:hover': {\r\n            color: theme.palette.primary.main\r\n        }\r\n    },\r\n\r\n    menuItem: {\r\n        border: `solid 1px ${theme.palette.primary.main}`,\r\n        width: \"100%\",\r\n        padding: \"10px\",\r\n        margin: \"auto\",\r\n        height: \"100%\"\r\n    },\r\n\r\n    errorMessage: {\r\n        margin: \"20px\"\r\n    },\r\n\r\n    gridContainer: {\r\n        height: \"100%\",\r\n        paddingBottom: \"100px\"\r\n    }\r\n}))\r\n\r\nexport default useStyles","\r\nimport { Button, Grid, Typography } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nimport ExportButton from '../ExportButton/ExportButton'\r\nimport GenerateSupporButton from '../GenerateSupportButton/GenerateSupportButton'\r\nimport OrientationButton from '../OrientationButton/OrientationButton'\r\nimport TransformControls from '../TransformControls/TransformControls'\r\nimport UploadSTL from '../UploadSTL/UploadSTL'\r\nimport WireframeSwitch from '../WireframeSwitch/WireframeSwitch'\r\nimport useStyles from './STLCanvasStyle'\r\nconst STLCanvas = () => {\r\n\r\n    const { scene, camera, renderer, defaultCameraPosition, orbitControls, sceneNames, listOfMesh } = useContext(CanvasContext)\r\n\r\n    const mount = useRef(null)\r\n\r\n    const handleSize = useRef(null)\r\n\r\n    //States\r\n    const [canvasLoaded, setCanvasLoaded] = useState(false)\r\n    const [modelLoaded, setModelLoaded] = useState(false)\r\n\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n\r\n        if (canvasLoaded) {\r\n            return\r\n        }\r\n\r\n        let width = mount.current.clientWidth\r\n        let height = mount.current.clientHeight\r\n        const init = () => {\r\n            scene.current = new THREE.Scene()\r\n            camera.current = new THREE.PerspectiveCamera(85, width / height, 0.1, 1000)\r\n            renderer.current = new THREE.WebGLRenderer({ antialias: true })\r\n            orbitControls.current = new OrbitControls(camera.current, renderer.current.domElement)\r\n            renderer.current.setSize(width, height)\r\n            renderer.current.shadowMap.enabled = true\r\n\r\n            scene.current.background = new THREE.Color(0x72645b)\r\n\r\n            camera.current.lookAt(scene.current.position)\r\n            camera.current.position.set(defaultCameraPosition.current.x, defaultCameraPosition.current.y, defaultCameraPosition.current.z)\r\n\r\n            mount.current.appendChild(renderer.current.domElement)\r\n\r\n            orbitControls.current.addEventListener('change', updateLight)\r\n            window.addEventListener('resize', handleResize, false)\r\n        }\r\n\r\n        const addLight = () => {\r\n            const light = new THREE.DirectionalLight(0xffffff, 1)\r\n            light.position.set(1, 1, 1).normalize()\r\n\r\n            light.name = sceneNames.current.mainLight\r\n            scene.current.add(light)\r\n        }\r\n\r\n        const handleResize = () => {\r\n            width = mount.current.clientWidth\r\n            height = mount.current.clientHeight\r\n            renderer.current.setSize(width, height)\r\n            camera.current.aspect = width / height\r\n            camera.current.updateProjectionMatrix()\r\n        }\r\n        //Bind the function to the global one\r\n        handleSize.current = handleResize\r\n\r\n        const updateLight = () => {\r\n            const light = scene.current.getObjectByName(sceneNames.current.mainLight)\r\n            light.position.copy(camera.current.position)\r\n        }\r\n        const animate = () => {\r\n            requestAnimationFrame(animate)\r\n            orbitControls.current.update()\r\n            orbitControls.current.enableZoom = true\r\n            render()\r\n        }\r\n\r\n        const render = () => {\r\n            renderer.current.render(scene.current, camera.current)\r\n        }\r\n\r\n        init()\r\n        addLight()\r\n        animate()\r\n        setCanvasLoaded(true)\r\n\r\n    }, [defaultCameraPosition, sceneNames, canvasLoaded, camera, scene, renderer, orbitControls])\r\n\r\n    //Remove event listener when component unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            window.removeEventListener('resize', handleSize.current, false)\r\n        }\r\n    }, [])\r\n\r\n    const removeModel = () => {\r\n        for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n            scene.current.remove(listOfMesh[meshIndex])\r\n        }\r\n        listOfMesh.splice(0, listOfMesh.length)\r\n\r\n        scene.current.remove(scene.current.getObjectByName(sceneNames.current.gridFloor))\r\n        scene.current.remove(scene.current.getObjectByName(sceneNames.current.mainPlane))\r\n        hideCanvas()\r\n    }\r\n    const hideCanvas = () => {\r\n        setModelLoaded(false)\r\n        const canvas = document.getElementById('stlCanvas')\r\n        canvas.style.visibility = 'hidden'\r\n    }\r\n    return (\r\n        <>\r\n            <div className={classes.stlCanvasWrapper} >\r\n                {\r\n                    (!modelLoaded) &&\r\n                    <UploadSTL setModelLoaded={setModelLoaded}></UploadSTL>\r\n                }\r\n\r\n                <div className={classes.stlCanvas} ref={mount} id=\"stlCanvas\"></div>\r\n\r\n                {\r\n                    (modelLoaded) &&\r\n                    <>\r\n                        <Grid container spacing={0} className={classes.gridContainer}>\r\n                            <Grid item xs={12} md={2} >\r\n                                <div className={classes.menuItem}>\r\n                                    <OrientationButton></OrientationButton>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <div className={classes.menuItem}>\r\n                                    <TransformControls></TransformControls>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <div className={classes.menuItem}>\r\n                                    <WireframeSwitch></WireframeSwitch>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <div className={classes.menuItem}>\r\n                                    <Button onClick={hideCanvas} fullWidth><Typography>Add Model</Typography><AddIcon /></Button>\r\n                                </div>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <div className={classes.menuItem}>\r\n                                    <ExportButton></ExportButton>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2} >\r\n                                <div className={classes.menuItem}>\r\n                                    <Button\r\n                                        onClick={removeModel}\r\n                                        \r\n                                        fullWidth\r\n                                    >\r\n                                        Remove Model\r\n                                </Button>\r\n                                </div>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                <GenerateSupporButton></GenerateSupporButton>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default STLCanvas","import React from 'react'\r\nimport STLCanvas from '../../Components/STLCanvas/STLCanvas'\r\nimport CanvasProvider from '../../Utils/Context/CanvasContext'\r\n\r\nexport const CanvasContext = React.createContext()\r\n\r\nconst SupportGenerator = () => {\r\n\r\n    return (\r\n        <>\r\n            <CanvasProvider>\r\n                <STLCanvas></STLCanvas>\r\n            </CanvasProvider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SupportGenerator\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Footer from './Components/Footer/Footer';\r\nimport NavBar from \"./Components/NavBar/NavBar\";\r\nimport FileConverter from './Pages/FileConverter/FileConverter';\r\nimport Home from './Pages/Home/Home';\r\nimport SupportGenerator from './Pages/SupportGenerator/SupportGenerator';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <NavBar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/supportGeneration\" component={SupportGenerator}/>\r\n          <Route exact path=\"/fileConverter\" component={FileConverter}/>\r\n        </Switch>\r\n        <Footer />\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark'\r\n    }\r\n})\r\n\r\nexport default theme","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport theme from './Assets/Style/theme'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\nimport { Paper, CssBaseline } from '@material-ui/core';\r\nReactDOM.render(\r\n\r\n  <BrowserRouter>\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline>\r\n        <Paper style={{ minHeight: \"100vh\", background: \"rgb(33,33,33)\" }}>\r\n          <App />\r\n        </Paper>\r\n      </CssBaseline>\r\n\r\n    </ThemeProvider>\r\n  </BrowserRouter>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}