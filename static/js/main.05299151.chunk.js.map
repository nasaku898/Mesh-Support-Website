{"version":3,"sources":["Components/NavBar/NavBarStyle.js","Components/NavBar/NavBar.js","Pages/Home/HomeStyle.js","Pages/Home/Home.js","Components/Footer/FooterStyle.js","Components/Footer/Footer.js","Components/STLCanvas/STLCanvasStyle.js","Utils/Context/CanvasContext.js","Components/OrientationButton/OrientationButton.js","Components/WireframeSwitch/WireframeSwitchStyle.js","Components/WireframeSwitch/WireframeSwitch.js","Components/GenerateSupportButton/GeneratorSupportButtonStyle.js","Components/GenerateSupportButton/GenerateSupportButton.js","Components/ErrorAlert/ErrorAlert.js","Components/UploadSTL/UploadSTLStyle.js","Components/UploadSTL/UploadSTL.js","Components/TransformControls/TransformControls.js","Components/STLCanvas/STLCanvas.js","Pages/SupportGenerator/SupportGenerator.js","Pages/FileConverter/FileConvertStyle.js","Pages/FileConverter/FileConverter.js","App.js","serviceWorker.js","Assets/Style/theme.js","index.js"],"names":["useStyles","makeStyles","theme","BoxStyle","padding","display","margin","breakpoints","down","navItems","width","button","spacing","link","textDecoration","NavBar","classes","AppBar","position","Toolbar","Link","component","RouterLink","to","color","className","Typography","href","Button","variant","endIcon","imageStyle","height","backgroundPosition","imageHolder","background","backgroundSize","description","paddingLeft","paddingRight","paddingTop","paddingBottom","title","fontSize","subtitle","uploadBtn","float","Home","Grid","container","item","xs","md","lg","Box","align","require","bottomNavigationStyle","left","bottom","backgroundColor","palette","primary","main","credit","Footer","stlCanvas","visibility","border","marginTop","stlCanvasWrapper","Input","uploadContainer","menuItem","errorMessage","gridContainer","CanvasContext","React","createContext","CanvasProvider","children","scene","useRef","camera","renderer","orbitControls","defaultCameraPosition","THREE","sceneNames","mainPlane","gridFloor","mainLight","stlModel","wireFrame","Provider","value","listOfMesh","OrientationButton","useContext","resetView","current","set","x","y","z","useState","anchorEl","setAnchorEl","handleClose","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","Math","sin","PI","cos","wireframe","overflow","WireframeSwitch","enableWireFrame","setEnableWireFrame","useEffect","getObjectByName","remove","Switch","checked","onChange","meshIndex","length","mesh","geo","geometry","mat","name","add","rotation","inputProps","removeBtn","progressBar","GenerateSupportButton","showProgress","setShowProgress","setTimeout","LinearProgress","ErrorAlert","message","Alert","severity","AlertTitle","UploadSTL","props","uploadSuccess","setUploadSuccess","setErrorMessage","fileName","setfileName","onSubmit","preventDefault","file","target","files","undefined","Error","split","pop","toUpperCase","loader","STLLoader","reader","FileReader","console","log","readAsDataURL","onload","load","result","material","scale","receiveShadow","castShadow","computeBoundingBox","center","computeBoundingSphere","boundingSphere","radius","boundingBox","min","originalPosition","originalRotation","push","document","getElementById","style","setModelLoaded","error","type","accept","htmlFor","TransformControls","enableManipulation","setEnableManipulation","listOfControls","removeTransformControls","controlIndex","transformControls","TransformManipulation","domElement","addEventListener","enabled","attach","IconButton","aria-label","PaperProps","maxHeight","setMode","ButtonGroup","size","setSize","max","STLCanvas","mount","handleSize","canvasLoaded","setCanvasLoaded","modelLoaded","clientWidth","clientHeight","createPlane","plane","specular","handleResize","aspect","updateProjectionMatrix","updateLight","copy","render","antialias","OrbitControls","shadowMap","lookAt","appendChild","window","light","normalize","addLight","gridHelper","createGridFloor","animate","requestAnimationFrame","update","enableZoom","removeEventListener","hideCanvas","ref","fullWidth","SupportGenerator","marginBottom","wrapper","FileConverter","STLloader","OBJloader","OBJLoader","OBJExporter","parse","blob","Blob","exportFileName","shift","saveAs","exportOBJ","obj","STLExporter","binary","exportSTL","App","exact","path","location","hostname","match","createMuiTheme","ReactDOM","ThemeProvider","CssBaseline","Paper","minHeight","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.05299151.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    BoxStyle: {\r\n\r\n        padding: \"16px\",\r\n        display: \"inline-block\",\r\n        margin: \"auto\",\r\n\r\n        [theme.breakpoints.down('sm')]: {\r\n            margin: \"4px\",\r\n            padding: \"2px\"\r\n        }\r\n\r\n    },\r\n\r\n    navItems: {\r\n        width: \"100%\"\r\n    },\r\n    \r\n    button: {\r\n        margin: theme.spacing(1),\r\n        width: \"150px\"\r\n    },\r\n\r\n    link: {\r\n        '&:hover': {\r\n            textDecoration: \"none\"\r\n        }\r\n    }\r\n\r\n}))\r\n\r\nexport default useStyles","import React from 'react'\r\nimport { AppBar, Toolbar, Typography, Button, Link } from '@material-ui/core';\r\nimport { Home } from '@material-ui/icons'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport useStyles from './NavBarStyle'\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nconst NavBar = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div >\r\n            <AppBar position=\"static\">\r\n                <Toolbar >\r\n                    <Link component={RouterLink} to=\"/\" color=\"inherit\">\r\n                        <Home />\r\n                    </Link>\r\n\r\n                    <div className={classes.navItems}>\r\n                        <Typography className={classes.BoxStyle} >\r\n                            <Link component={RouterLink} to=\"/test\" color=\"inherit\">\r\n                                About\r\n                            </Link>\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.BoxStyle}>\r\n                            <Link href=\"https://github.com/nasaku898/Mesh-Support-Generator\" color=\"inherit\">\r\n                                GitHub\r\n                            </Link>\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.BoxStyle}>\r\n                            <Link component={RouterLink} to=\"/fileConverter\" color=\"inherit\">\r\n                                Convert File\r\n                            </Link>\r\n                        </Typography>\r\n                    </div>\r\n\r\n                    <Link className={classes.link} component={RouterLink} to=\"/supportGeneration\" color=\"inherit\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            className={classes.button}\r\n                            endIcon={<CloudUploadIcon />}\r\n                        >\r\n                            Upload\r\n                        </Button>\r\n                    </Link>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    imageStyle: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        backgroundPosition: \" center center\"\r\n    },\r\n\r\n    imageHolder: {\r\n        background: \"url(https://cdn.discordapp.com/attachments/484102130286854144/730130581437939801/3d-printer.jpg) no-repeat\",\r\n        backgroundPosition: \"center center\",\r\n        backgroundSize: \"cover\",\r\n        height: \"768px\"\r\n    },\r\n\r\n    description: {\r\n        height: \"768px\",\r\n        paddingLeft: \"20%\",\r\n        paddingRight: \"20%\",\r\n        paddingTop: \"20%\",\r\n        paddingBottom: \"20%\"\r\n    },\r\n\r\n    title: {\r\n        margin: \"50px 0px 50px 0px\",\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: \"2.5rem\"\r\n        }\r\n    },\r\n\r\n    subtitle: {\r\n        margin: \"20px 0px 20px 0px\",\r\n    },\r\n\r\n    uploadBtn: {\r\n        float: \"left\"\r\n    }\r\n}))\r\n\r\nexport default useStyles","import React from 'react'\r\nimport { Grid, Box, Typography, Button, Link } from '@material-ui/core'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport useStyles from './HomeStyle'\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nconst Home = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={0}>\r\n                \r\n                <Grid item xs={12} md={6} lg={6}>\r\n                    <Box className={classes.imageHolder}>\r\n                    </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={6} lg={6}>\r\n                    <Box className={classes.description}>\r\n                        <Typography className={classes.title} variant=\"h3\" align=\"left\">\r\n                            3D STL Model\r\n                            <br />\r\n                            Grid Support\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.subtitle} variant=\"h6\" align=\"left\">\r\n                            Generate a grid support structure for your STL model\r\n                        </Typography>\r\n\r\n                        <Link className={classes.link} component={RouterLink} to=\"/supportGeneration\" color=\"inherit\">\r\n                            <br />\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.uploadBtn}\r\n                                endIcon={<CloudUploadIcon />}\r\n                            >\r\n                                <Typography>\r\n                                    Upload File\r\n                            </Typography>\r\n                            </Button>\r\n                        </Link>\r\n                        \r\n                    </Box>\r\n               \r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    bottomNavigationStyle: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        bottom: 0,\r\n        width: \"100%\",\r\n        backgroundColor: theme.palette.primary.main\r\n    },\r\n\r\n    credit: {\r\n        padding: \"15px\"\r\n    }\r\n}))\r\n\r\nexport default useStyles","import React from 'react'\r\nimport { Typography } from '@material-ui/core'\r\nimport useStyles from './FooterStyle'\r\n\r\nconst Footer = () => {\r\n    const classes = useStyles()\r\n    return (\r\n        <div className={classes.bottomNavigationStyle}>\r\n            <Typography className={classes.credit}>\r\n                &copy; DAMLab | All rights reserved.\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    stlCanvas: {\r\n        width: \"100%\",\r\n        height: \"500px\",\r\n        visibility: \"hidden\",\r\n        border: `solid 3px ${theme.palette.primary.main}`,\r\n        margin: \"auto\",\r\n        marginTop: \"50px\"\r\n    },\r\n\r\n    stlCanvasWrapper: {\r\n        width: \"50%\",\r\n        height: \"100%\",\r\n        margin: \"auto\",\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: \"90%\"\r\n        }\r\n\r\n    },\r\n\r\n    Input: {\r\n        display: \"none\"\r\n    },\r\n\r\n    uploadContainer: {\r\n        border: `solid 3px ${theme.palette.primary.main}`,\r\n        padding: \"25px\",\r\n        marginTop: \"25px\",\r\n        '&:hover': {\r\n            color: theme.palette.primary.main\r\n        }\r\n    },\r\n\r\n    menuItem: {\r\n        border: `solid 1px ${theme.palette.primary.main}`,\r\n        width: \"100%\",\r\n        padding: \"10px\",\r\n        margin: \"auto\",\r\n        height: \"100%\"\r\n    },\r\n\r\n    errorMessage: {\r\n        margin: \"20px\"\r\n    },\r\n\r\n    gridContainer: {\r\n        height: \"100%\",\r\n        paddingBottom: \"100px\"\r\n    }\r\n}))\r\n\r\nexport default useStyles","import React, { useRef } from 'react'\r\nimport * as THREE from 'three'\r\n\r\nexport const CanvasContext = React.createContext()\r\n\r\nconst CanvasProvider = ({ children }) => {\r\n    const scene = useRef(null)\r\n    const camera = useRef(null)\r\n    const renderer = useRef(null)\r\n    const orbitControls = useRef(null)\r\n    const defaultCameraPosition = useRef(new THREE.Vector3(0, 0, 100))\r\n    \r\n    const sceneNames = useRef({\r\n        mainPlane: \"mainPlane\",\r\n        gridFloor: \"gridFloor\",\r\n        mainLight: \"mainLight\",\r\n        stlModel: \"stlModel\",\r\n        wireFrame: \"wireFrame\"\r\n    })\r\n\r\n    const listOfMesh = []\r\n\r\n    return (\r\n        <CanvasContext.Provider value={{\r\n            scene: scene,\r\n            camera: camera,\r\n            renderer: renderer,\r\n            defaultCameraPosition: defaultCameraPosition,\r\n            sceneNames: sceneNames,\r\n            orbitControls: orbitControls,\r\n            listOfMesh:listOfMesh\r\n        }}>\r\n            {children}\r\n        </CanvasContext.Provider>\r\n    )\r\n}\r\nexport default CanvasProvider","import React, { useContext } from 'react'\r\nimport { Button, Menu, MenuItem } from '@material-ui/core'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nconst OrientationButton = () => {\r\n\r\n    const { camera, defaultCameraPosition } = useContext(CanvasContext)\r\n\r\n    const resetView = () => {\r\n        camera.current.position.set(defaultCameraPosition.current.x, defaultCameraPosition.current.y, defaultCameraPosition.current.z)\r\n    }\r\n\r\n    const leftSideView = () => {\r\n        resetView()\r\n        camera.current.position.x = Math.sin(-Math.PI / 2) * defaultCameraPosition.current.z\r\n        camera.current.position.z = Math.cos(-Math.PI / 2) * defaultCameraPosition.current.z\r\n    }\r\n\r\n    const rightSideView = () => {\r\n        resetView()\r\n        camera.current.position.x = Math.sin(Math.PI / 2) * defaultCameraPosition.current.z\r\n        camera.current.position.z = Math.cos(Math.PI / 2) * defaultCameraPosition.current.z\r\n    }\r\n    const topView = () => {\r\n        resetView()\r\n        camera.current.position.y = defaultCameraPosition.current.z\r\n        camera.current.position.z = 0\r\n    }\r\n\r\n    const frontView = () => {\r\n        resetView()\r\n    }\r\n\r\n    const threeDView = () => {\r\n        resetView()\r\n\r\n        camera.current.position.x = Math.sin(-Math.PI / 4) * defaultCameraPosition.current.z\r\n        camera.current.position.z = Math.cos(-Math.PI / 4) * defaultCameraPosition.current.z\r\n        camera.current.position.y = defaultCameraPosition.current.z\r\n    }\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" aria-controls=\"orientation-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n                Select Orientation\r\n            </Button>\r\n            <Menu\r\n                id=\"orientation-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={() => { leftSideView(); handleClose(); }}>Left</MenuItem>\r\n                <MenuItem onClick={() => { rightSideView(); handleClose(); }}>Right</MenuItem>\r\n                <MenuItem onClick={() => { topView(); handleClose(); }}>Top</MenuItem>\r\n                <MenuItem onClick={() => { frontView(); handleClose(); }}>Front</MenuItem>\r\n                <MenuItem onClick={() => { threeDView();handleClose(); }}>3D</MenuItem>\r\n            </Menu>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrientationButton\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    wireframe: {\r\n        overflow: \"hidden\"\r\n    }\r\n}))\r\n\r\nexport default useStyles","import React, { useState, useContext, useEffect } from 'react'\r\nimport { Typography, Switch } from '@material-ui/core'\r\nimport useStyles from './WireframeSwitchStyle'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nimport * as THREE from 'three'\r\n\r\nconst WireframeSwitch = () => {\r\n    const [enableWireFrame, setEnableWireFrame] = useState(false)\r\n    const classes = useStyles()\r\n\r\n    const { scene, sceneNames, listOfMesh } = useContext(CanvasContext)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // eslint-disable-next-line \r\n            const wireframe = scene.current.getObjectByName(sceneNames.current.wireFrame)\r\n            // eslint-disable-next-line\r\n            scene.current.remove(wireframe)\r\n        }\r\n    }, [scene, sceneNames])\r\n\r\n    const toggleWireFrame = () => {\r\n        if (!enableWireFrame) {\r\n            const enableWireFrame = () => {\r\n                for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n                    const mesh = listOfMesh[meshIndex]\r\n                    const geo = new THREE.WireframeGeometry(mesh.geometry)\r\n                    const mat = new THREE.MeshPhongMaterial({ color: 0xff00ff })\r\n\r\n                    const wireframe = new THREE.LineSegments(geo, mat)\r\n                    wireframe.name = \"wireframe\"\r\n                    mesh.add(wireframe)\r\n                    wireframe.rotation.x = 2 * Math.PI\r\n                }\r\n                setEnableWireFrame(true)\r\n            }\r\n            enableWireFrame()\r\n        } else {\r\n\r\n            for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n                const mesh = listOfMesh[meshIndex]\r\n                const wireframe = mesh.getObjectByName(\"wireframe\")\r\n                mesh.remove(wireframe)\r\n            }\r\n\r\n            setEnableWireFrame(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography className={classes.wireframe}>Wireframe</Typography>\r\n            <Switch\r\n                checked={enableWireFrame}\r\n                onChange={toggleWireFrame}\r\n                name=\"checkedA\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WireframeSwitch\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    removeBtn: {\r\n        width: \"100%\"\r\n    },\r\n\r\n    progressBar: {\r\n        marginTop: \"10px\"\r\n    },\r\n}))\r\n\r\nexport default useStyles","import React, { useState } from 'react'\r\nimport useStyles from './GeneratorSupportButtonStyle'\r\nimport { Button, LinearProgress } from '@material-ui/core'\r\nconst GenerateSupportButton = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [showProgress, setShowProgress] = useState(false)\r\n\r\n    /*To do: connext this button to backend and update view*/\r\n    const generateSupport = () => {\r\n        // make api call here:\r\n        const test = () => {\r\n            setShowProgress(false)\r\n        }\r\n        setShowProgress(true)\r\n        setTimeout(test, 10000)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={generateSupport}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.removeBtn} >\r\n                Generate Support\r\n            </Button>\r\n            {\r\n                (showProgress) &&\r\n                <LinearProgress color=\"secondary\" className={classes.progressBar}></LinearProgress>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GenerateSupportButton\r\n","import React from 'react'\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nconst ErrorAlert = ({ message }) => {\r\n    return (\r\n        <div>\r\n            <Alert severity=\"error\">\r\n                <AlertTitle>Error</AlertTitle>\r\n                {message}\r\n            </Alert>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorAlert\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    Input: {\r\n        display: \"none\"\r\n    },\r\n    uploadContainer: {\r\n        border: `solid 3px ${theme.palette.primary.main}`,\r\n        padding: \"25px\",\r\n        marginTop: \"25px\",\r\n        '&:hover': {\r\n            color: theme.palette.primary.main\r\n        }\r\n    },\r\n    errorMessage: {\r\n        margin: \"20px\"\r\n    },\r\n}))\r\n\r\nexport default useStyles","import React, { useState, useContext } from 'react'\r\nimport { Box, Input, Typography, Button } from '@material-ui/core'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport ErrorAlert from '../ErrorAlert/ErrorAlert'\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader'\r\nimport * as THREE from 'three'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nimport useStyles from './UploadSTLStyle'\r\n\r\n\r\nconst UploadSTL = (props) => {\r\n    let { scene, camera, defaultCameraPosition, sceneNames, listOfMesh } = useContext(CanvasContext)\r\n\r\n    const [uploadSuccess, setUploadSuccess] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    const [fileName, setfileName] = useState(null)\r\n\r\n    const classes = useStyles()\r\n\r\n    const getFileName = () => {\r\n        setfileName(document.getElementById('file').value.split(/(\\\\|\\/)/g).pop())\r\n    }\r\n\r\n    const loadSTL = (event) => {\r\n        event.preventDefault()\r\n        try {\r\n            const file = event.target.file.files[0]\r\n\r\n            if (file === undefined) {\r\n                throw new Error(\"No file found\")\r\n            }\r\n\r\n            if (file.name.split('.').pop().toUpperCase() !== \"STL\") {\r\n                throw new Error(\"File type is not supported\")\r\n            }\r\n\r\n            const loader = new STLLoader()\r\n            const reader = new FileReader()\r\n            console.log(file)\r\n            reader.readAsDataURL(file)\r\n            reader.onload = (event) => {\r\n                loader.load(event.target.result, geometry => {\r\n                    const material = new THREE.MeshPhongMaterial({ color: 0xff00ff })\r\n                    const mesh = new THREE.Mesh(geometry, material)\r\n\r\n                    // Rotate to flat plane\r\n                    mesh.rotation.x = - Math.PI / 2\r\n                    mesh.scale.set(0.5, 0.5, 0.5)\r\n                    mesh.receiveShadow = true\r\n                    mesh.castShadow = true\r\n                    mesh.geometry.computeBoundingBox()\r\n                    mesh.geometry.center()\r\n                    mesh.geometry.computeBoundingSphere()\r\n\r\n                    //center mesh\r\n                    camera.current.position.z = mesh.geometry.boundingSphere.radius\r\n                    defaultCameraPosition.current.set(defaultCameraPosition.current.x, defaultCameraPosition.current.y, camera.current.position.z)\r\n                    mesh.position.y += -mesh.geometry.boundingBox.min.z * 0.5\r\n                    mesh.name = sceneNames.current.stlModel\r\n                    mesh.originalPosition = { x: mesh.position.x, y: mesh.position.y, z: mesh.position.z }\r\n                    mesh.originalRotation = { x: mesh.rotation.x, y: mesh.rotation.y, z: mesh.rotation.z }\r\n                    listOfMesh.push(mesh)\r\n                    scene.current.add(mesh)\r\n\r\n                    camera.current.position.x = Math.sin(-Math.PI / 4) * defaultCameraPosition.current.z\r\n                    camera.current.position.z = Math.cos(-Math.PI / 4) * defaultCameraPosition.current.z\r\n                    camera.current.position.y = defaultCameraPosition.current.z\r\n                    const canvas = document.getElementById('stlCanvas')\r\n\r\n                    canvas.style.visibility = 'visible'\r\n                    props.setModelLoaded(true)\r\n                    setUploadSuccess(true)\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.message)\r\n            setUploadSuccess(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <form onSubmit={loadSTL}>\r\n                    <Input className={classes.Input} type=\"file\" id=\"file\" name=\"file\" inputProps={{ accept: \".stl\" }} onChange={getFileName} >\r\n                    </Input>\r\n\r\n                    <Box className={classes.uploadContainer}>\r\n                        <label htmlFor=\"file\">\r\n\r\n                            <Typography variant=\"h5\" >\r\n                                {\r\n                                    (fileName ? fileName : \"+ Select a STL file\")\r\n                                }\r\n                            </Typography>\r\n\r\n                        </label>\r\n                    </Box>\r\n\r\n                    <br />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.uploadBtn}\r\n                        endIcon={<CloudUploadIcon />}\r\n                        type=\"submit\"\r\n                    >\r\n                        <Typography>\r\n                            Load File\r\n                        </Typography>\r\n                    </Button>\r\n                </form>\r\n            }\r\n            {\r\n                (!uploadSuccess) &&\r\n                <div className={classes.errorMessage}>\r\n                    <ErrorAlert message={errorMessage}></ErrorAlert>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UploadSTL\r\n","import React, { useState, useContext, useEffect, useRef } from 'react'\r\nimport { Switch, IconButton, Typography, MenuItem, Menu, ButtonGroup, Button } from '@material-ui/core'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nimport { TransformControls as TransformManipulation } from 'three/examples/jsm/controls/TransformControls'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\n\r\nconst TransformControls = () => {\r\n    const [enableManipulation, setEnableManipulation] = useState(false)\r\n    const { scene, camera, renderer, orbitControls, listOfMesh } = useContext(CanvasContext)\r\n\r\n    const listOfControls = useRef([])\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const toggleManipulation = () => {\r\n        if (!enableManipulation) {\r\n\r\n            for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n                let mesh = listOfMesh[meshIndex]\r\n                const transformControls = new TransformManipulation(camera.current, renderer.current.domElement)\r\n                transformControls.addEventListener('dragging-changed', (event) => { orbitControls.current.enabled = !event.value })\r\n                transformControls.attach(mesh)\r\n\r\n                scene.current.add(transformControls)\r\n                listOfControls.current.push(transformControls)\r\n            }\r\n            setEnableManipulation(true)\r\n        } else {\r\n            removeTransformControls()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            removeTransformControls()\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const removeTransformControls = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            scene.current.remove(listOfControls.current[controlIndex])\r\n        }\r\n        setEnableManipulation(false)\r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleTranslation = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            listOfControls.current[controlIndex].setMode(\"translate\")\r\n        }\r\n    }\r\n\r\n    const handleRotation = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            listOfControls.current[controlIndex].setMode(\"rotate\")\r\n        }\r\n    }\r\n\r\n    const handleScale = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            listOfControls.current[controlIndex].setMode(\"scale\")\r\n        }\r\n    }\r\n\r\n    const handleIncrease = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            const transformControls = listOfControls.current[controlIndex]\r\n            transformControls.setSize(transformControls.size + 0.1)\r\n        }\r\n    }\r\n\r\n    const handleDecrease = () => {\r\n        for (let controlIndex = 0; controlIndex < listOfControls.current.length; controlIndex++) {\r\n            const transformControls = listOfControls.current[controlIndex]\r\n            transformControls.setSize(Math.max(transformControls.size - 0.1, 0.1))\r\n        }\r\n    }\r\n\r\n    const handleReset = () => {\r\n        for (let meshIndex = 0; meshIndex < listOfMesh.length; meshIndex++) {\r\n            const mesh = listOfMesh[meshIndex]\r\n            mesh.position.set(mesh.originalPosition.x, mesh.originalPosition.y, mesh.originalPosition.z)\r\n            mesh.rotation.set(mesh.originalRotation.x, mesh.originalRotation.y, mesh.originalRotation.z)\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography> Manipulation</Typography>\r\n            <Switch\r\n                checked={enableManipulation}\r\n                onChange={toggleManipulation}\r\n                name=\"checkedA\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n            />\r\n\r\n            {\r\n                (enableManipulation) &&\r\n                <IconButton\r\n                    aria-label=\"more\"\r\n                    aria-controls=\"long-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleClick}\r\n                >\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n            }\r\n\r\n            <Menu\r\n                id=\"long-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={open}\r\n                onClose={handleClose}\r\n                PaperProps={{\r\n                    style: {\r\n                        maxHeight: 48 * 4.5,\r\n                        width: '20ch',\r\n                    },\r\n                }}\r\n            >\r\n\r\n                <MenuItem onClick={handleTranslation}>\r\n                    Translate\r\n                </MenuItem>\r\n                <MenuItem onClick={handleRotation}>\r\n                    Rotation\r\n                </MenuItem>\r\n                <MenuItem onClick={handleScale}>\r\n                    Scale\r\n                </MenuItem>\r\n                <MenuItem onClick={handleReset}>\r\n                    Reset\r\n                </MenuItem>\r\n                <MenuItem>\r\n                    <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\r\n                        <Button onClick={handleIncrease}><AddIcon /></Button>\r\n                        <Button onClick={handleDecrease}><RemoveIcon /></Button>\r\n                    </ButtonGroup>\r\n                </MenuItem>\r\n            </Menu>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TransformControls\r\n","\r\nimport React, { useRef, useEffect, useState, useContext } from 'react'\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\r\nimport { Button, Grid, Typography } from '@material-ui/core'\r\nimport useStyles from './STLCanvasStyle'\r\nimport { CanvasContext } from '../../Utils/Context/CanvasContext'\r\nimport OrientationButton from '../OrientationButton/OrientationButton'\r\nimport WireframeSwitch from '../WireframeSwitch/WireframeSwitch'\r\nimport GenerateSupporButton from '../GenerateSupportButton/GenerateSupportButton'\r\nimport UploadSTL from '../UploadSTL/UploadSTL'\r\nimport TransformControls from '../TransformControls/TransformControls'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nconst STLCanvas = () => {\r\n\r\n    const { scene, camera, renderer, defaultCameraPosition, orbitControls, sceneNames } = useContext(CanvasContext)\r\n\r\n    const mount = useRef(null)\r\n\r\n    const handleSize = useRef(null)\r\n    const planeSize = 60\r\n\r\n    //States\r\n    const [canvasLoaded, setCanvasLoaded] = useState(false)\r\n    const [modelLoaded, setModelLoaded] = useState(false)\r\n\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n\r\n        if (canvasLoaded) {\r\n            return\r\n        }\r\n\r\n        let width = mount.current.clientWidth\r\n        let height = mount.current.clientHeight\r\n        const init = () => {\r\n            scene.current = new THREE.Scene()\r\n            camera.current = new THREE.PerspectiveCamera(85, width / height, 0.1, 1000)\r\n            renderer.current = new THREE.WebGLRenderer({ antialias: true })\r\n            orbitControls.current = new OrbitControls(camera.current, renderer.current.domElement)\r\n            renderer.current.setSize(width, height)\r\n            renderer.current.shadowMap.enabled = true\r\n\r\n            scene.current.background = new THREE.Color(0x72645b)\r\n\r\n            camera.current.lookAt(scene.current.position)\r\n            camera.current.position.set(defaultCameraPosition.current.x, defaultCameraPosition.current.y, defaultCameraPosition.current.z)\r\n\r\n            createPlane()\r\n            mount.current.appendChild(renderer.current.domElement)\r\n\r\n            orbitControls.current.addEventListener('change', updateLight)\r\n            window.addEventListener('resize', handleResize, false)\r\n        }\r\n\r\n        const createPlane = () => {\r\n            var plane = new THREE.Mesh(\r\n                new THREE.PlaneBufferGeometry(planeSize, planeSize),\r\n                new THREE.MeshPhongMaterial({ color: 0x999999, specular: 0x101010 })\r\n            )\r\n            plane.name = sceneNames.current.mainPlane\r\n            plane.rotation.x = - Math.PI / 2\r\n            plane.position.y = - 0.5\r\n            scene.current.add(plane)\r\n        }\r\n\r\n        const createGridFloor = () => {\r\n            const size = planeSize\r\n            const divisions = planeSize\r\n            const gridHelper = new THREE.GridHelper(size, divisions)\r\n            gridHelper.name = sceneNames.current.gridFloor\r\n            scene.current.add(gridHelper)\r\n        }\r\n\r\n        const addLight = () => {\r\n            const light = new THREE.DirectionalLight(0xffffff, 1)\r\n            light.position.set(1, 1, 1).normalize()\r\n\r\n            light.name = sceneNames.current.mainLight\r\n            scene.current.add(light)\r\n        }\r\n\r\n        const handleResize = () => {\r\n            width = mount.current.clientWidth\r\n            height = mount.current.clientHeight\r\n            renderer.current.setSize(width, height)\r\n            camera.current.aspect = width / height\r\n            camera.current.updateProjectionMatrix()\r\n        }\r\n        //Bind the function to the global one\r\n        handleSize.current = handleResize\r\n\r\n        const updateLight = () => {\r\n            const light = scene.current.getObjectByName(sceneNames.current.mainLight)\r\n            light.position.copy(camera.current.position)\r\n        }\r\n        const animate = () => {\r\n            requestAnimationFrame(animate)\r\n            orbitControls.current.update()\r\n            orbitControls.current.enableZoom = true\r\n            render()\r\n        }\r\n\r\n        const render = () => {\r\n            renderer.current.render(scene.current, camera.current)\r\n        }\r\n\r\n        init()\r\n        addLight()\r\n        createGridFloor()\r\n        animate()\r\n        setCanvasLoaded(true)\r\n\r\n    }, [defaultCameraPosition, sceneNames, canvasLoaded, camera, scene, renderer, orbitControls])\r\n\r\n    //Remove event listener when component unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            window.removeEventListener('resize', handleSize.current, false)\r\n        }\r\n    }, [])\r\n\r\n    const removeModel = () => {\r\n        const mesh = scene.current.getObjectByName(sceneNames.current.stlModel)\r\n        scene.current.remove(mesh)\r\n\r\n        hideCanvas()\r\n    }\r\n    const hideCanvas = () =>{\r\n        setModelLoaded(false)\r\n        const canvas = document.getElementById('stlCanvas')\r\n        canvas.style.visibility = 'hidden'\r\n    }\r\n    return (\r\n        <>\r\n            <div className={classes.stlCanvasWrapper} >\r\n                {\r\n                    (!modelLoaded) &&\r\n                    <UploadSTL setModelLoaded={setModelLoaded}></UploadSTL>\r\n                }\r\n                \r\n                <div className={classes.stlCanvas} ref={mount} id=\"stlCanvas\"></div>\r\n\r\n                {\r\n                    (modelLoaded) &&\r\n                    <>\r\n                        <Grid container spacing={0} className={classes.gridContainer}>\r\n                            <Grid item xs={12} md={3} >\r\n                                <div className={classes.menuItem}>\r\n                                    <OrientationButton></OrientationButton>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={3}>\r\n                                <div className={classes.menuItem}>\r\n                                    <TransformControls></TransformControls>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <div className={classes.menuItem}>\r\n                                    <WireframeSwitch></WireframeSwitch>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <div className={classes.menuItem}>\r\n                                    <Button onClick={hideCanvas}><Typography>Add Model</Typography><AddIcon/></Button>\r\n                                </div>\r\n                                \r\n                                </Grid>\r\n                            <Grid item xs={12} md={2} >\r\n                                <div className={classes.menuItem}>\r\n                                    <Button\r\n                                        onClick={removeModel}\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        fullWidth\r\n                                    >\r\n                                        Remove Model\r\n                                </Button>\r\n                                </div>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                <GenerateSupporButton></GenerateSupporButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        \r\n                    </>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default STLCanvas","import React from 'react'\r\nimport STLCanvas from '../../Components/STLCanvas/STLCanvas'\r\nimport CanvasProvider from '../../Utils/Context/CanvasContext'\r\n\r\nexport const CanvasContext = React.createContext()\r\n\r\nconst SupportGenerator = () => {\r\n\r\n    return (\r\n        <>\r\n            <CanvasProvider>\r\n                <STLCanvas></STLCanvas>\r\n            </CanvasProvider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SupportGenerator\r\n","const { makeStyles } = require(\"@material-ui/core\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    uploadContainer: {\r\n        border: `solid 3px ${theme.palette.primary.main}`,\r\n        padding: \"25px\",\r\n        marginTop: \"25px\",\r\n        marginBottom: \"25px\",\r\n        '&:hover': {\r\n            color: theme.palette.primary.main\r\n        }\r\n    },\r\n\r\n    Input: {\r\n        display: \"none\"\r\n    },\r\n\r\n    wrapper: {\r\n        width: \"50%\",\r\n        margin: \"auto\",\r\n        [theme.breakpoints.down('xs')]: {\r\n            fontSize: \"1.5rem\",\r\n            width: \"80%\"\r\n        }\r\n    },\r\n\r\n    Typography: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            fontSize: \"1.5rem\",\r\n            color: \"red\",\r\n            width: \"100%\"\r\n        }\r\n    }\r\n}))\r\n\r\nexport default useStyles","import React, { useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter'\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader'\r\nimport { STLExporter } from 'three/examples/jsm/exporters/STLExporter'\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\r\nimport { Input, Button, Typography, Grid, Box } from '@material-ui/core'\r\nimport { saveAs } from 'file-saver'\r\nimport useStyles from './FileConvertStyle'\r\nimport SyncAltIcon from '@material-ui/icons/SyncAlt';\r\nimport ErrorAlert from '../../Components/ErrorAlert/ErrorAlert'\r\nconst FileConverter = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [fileName, setfileName] = useState(null)\r\n    const [uploadSuccess, setUploadSuccess] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    const exportOBJ = (mesh) => {\r\n        const exporter = new OBJExporter()\r\n        const file = exporter.parse(mesh)\r\n        let blob = new Blob([file], { type: 'text/plain' })\r\n        const exportFileName = fileName.split('.').shift()\r\n        saveAs(blob, `${exportFileName}.obj`)\r\n    }\r\n\r\n    const exportSTL = (mesh) => {\r\n        const exporter = new STLExporter()\r\n        const file = exporter.parse(mesh, { binary: true })\r\n        let blob = new Blob([file], { type: 'text/plain' })\r\n        const exportFileName = fileName.split('.').shift()\r\n        saveAs(blob, `${exportFileName}.stl`)\r\n    }\r\n\r\n    const getFileName = () => {\r\n        setfileName(document.getElementById('file').value.split(/(\\\\|\\/)/g).pop())\r\n    }\r\n\r\n    const convertSTLtoOBJ = (event) => {\r\n        event.preventDefault()\r\n        try {\r\n            const file = event.target.file.files[0]\r\n            if (file === undefined) {\r\n                throw new Error(\"No file found\")\r\n            }\r\n\r\n            if (file.name.split('.').pop().toUpperCase() !== \"STL\" && file.name.split('.').pop().toUpperCase() !== \"OBJ\") {\r\n                throw new Error(\"File type is not supported\")\r\n            }\r\n\r\n            const STLloader = new STLLoader()\r\n            const OBJloader = new OBJLoader()\r\n            \r\n            const reader = new FileReader()\r\n            \r\n            let mesh = undefined\r\n            \r\n            reader.readAsDataURL(file)\r\n            reader.onload = (event) => {\r\n                if (file.name.split('.').pop().toUpperCase() === \"STL\") {\r\n                    STLloader.load(event.target.result, geometry => {\r\n                        const material = new THREE.MeshPhongMaterial({ color: 0xff00ff })\r\n                        mesh = new THREE.Mesh(geometry, material)\r\n                        exportOBJ(mesh)\r\n                    })\r\n                } else {\r\n                    OBJloader.load(event.target.result, obj => {\r\n                        mesh = obj.children.pop()\r\n                        exportSTL(mesh)\r\n                    })\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.message)\r\n            setUploadSuccess(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n\r\n            <Grid container spacing={0}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h2\">Convert STL <SyncAltIcon fontSize='large' /> OBJ</Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <form onSubmit={convertSTLtoOBJ}>\r\n                        <Input className={classes.Input} type=\"file\" id=\"file\" inputProps={{ accept: \".stl,.obj\" }} onChange={getFileName} />\r\n                        <Box className={classes.uploadContainer}>\r\n                            <label htmlFor=\"file\" >\r\n\r\n                                <Typography variant=\"h5\" >\r\n                                    {\r\n                                        fileName ? fileName : \"Select files for conversion\"\r\n                                    }\r\n                                </Typography>\r\n                            </label>\r\n\r\n                        </Box>\r\n\r\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                            Convert\r\n                        </Button>\r\n\r\n                        {\r\n                            (!uploadSuccess) &&\r\n                            <ErrorAlert message={errorMessage}></ErrorAlert>\r\n                        }\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FileConverter\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport NavBar from \"./Components/NavBar/NavBar\"\r\nimport Home from './Pages/Home/Home';\r\nimport Footer from './Components/Footer/Footer';\r\nimport SupportGenerator from './Pages/SupportGenerator/SupportGenerator';\r\nimport FileConverter from './Pages/FileConverter/FileConverter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <NavBar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/supportGeneration\" component={SupportGenerator}/>\r\n          <Route exact path=\"/fileConverter\" component={FileConverter}/>\r\n        </Switch>\r\n        <Footer />\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark'\r\n    }\r\n})\r\n\r\nexport default theme","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport theme from './Assets/Style/theme'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\nimport { Paper, CssBaseline } from '@material-ui/core';\r\nReactDOM.render(\r\n\r\n  <BrowserRouter>\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline>\r\n        <Paper style={{ minHeight: \"100vh\", background: \"rgb(33,33,33)\" }}>\r\n          <App />\r\n        </Paper>\r\n      </CssBaseline>\r\n\r\n    </ThemeProvider>\r\n  </BrowserRouter>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}